{
  "name": "Pruebas Taqueria",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ff3f992e-bf39-432a-9dad-05ce3ec14d26",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        80,
        32
      ],
      "id": "956ad331-2bc7-4535-98f5-5668b7d5ffc9",
      "name": "Webhook",
      "webhookId": "ff3f992e-bf39-432a-9dad-05ce3ec14d26"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        960,
        32
      ],
      "id": "19daa7ee-a237-4b61-837c-13cf2511d961",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "fieldToSplitOut": "message",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -48,
        800
      ],
      "id": "e8017899-7fca-4e2a-930c-1419c454df07",
      "name": "Split Out"
    },
    {
      "parameters": {
        "operation": "delete",
        "key": "={{ $('Webhook').item.json.body[0].body.conversationId }}_buffer"
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -240,
        800
      ],
      "id": "8072307a-5804-4ac0-bdbe-4c8835bca75f",
      "name": "Redis2",
      "credentials": {
        "redis": {
          "id": "kU19ZBPHsrIug6kN",
          "name": "Redis webmaster"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -368,
        640
      ],
      "id": "550f1165-c882-430d-a86c-1fe560b838e3",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {
        "amount": 9
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -416,
        896
      ],
      "id": "a4b62098-0b29-4733-aa52-5a036213cc8d",
      "name": "Wait",
      "webhookId": "64361093-e62a-468b-9e51-1ea836fc358a"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ JSON.parse($json.message.last()).messageId.toString() }}",
                    "rightValue": "={{ $('Webhook').item.json.body[0].body.messageId }}",
                    "operator": {
                      "type": "string",
                      "operation": "notEquals"
                    },
                    "id": "bf9c7bd4-434e-4e81-884e-b2591ac56bc7"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "No hacer nada"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b1284c35-fe90-4e0e-a0e4-f35a927773fb",
                    "leftValue": "={{ new Date(new Date(JSON.parse($json.message.last()).hora).getTime() - 9*60*60*1000).toISOString().slice(0, -1) + '-09:00' }}",
                    "rightValue": "={{ $now.minus(9,'seconds') }}",
                    "operator": {
                      "type": "dateTime",
                      "operation": "before"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Seguir"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra",
          "renameFallbackOutput": "Esperar"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -624,
        784
      ],
      "id": "4a93dad2-4288-4b07-92f0-0c707e23bb30",
      "name": "Switch"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "message",
        "key": "={{ $('Webhook').item.json.body[0].body.conversationId }}_buffer",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -848,
        896
      ],
      "id": "6ea1a3be-00af-4c1b-870d-04b2b0cb4f19",
      "name": "Redis1",
      "credentials": {
        "redis": {
          "id": "kU19ZBPHsrIug6kN",
          "name": "Redis webmaster"
        }
      }
    },
    {
      "parameters": {
        "operation": "push",
        "list": "={{ $('Webhook').item.json.body[0].body.conversationId }}_buffer",
        "messageData": "={{ $json.Mensaje }}",
        "tail": true
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        -848,
        656
      ],
      "id": "8134702c-238f-40f9-b2c9-da696c707e19",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "kU19ZBPHsrIug6kN",
          "name": "Redis webmaster"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\n// Manejar errores en el parsing\nlet allContent = '';\nlet validItems = [];\n\ntry {\n  validItems = items.map(item => {\n    try {\n      const parsedMessage = JSON.parse(item.json.message);\n      return parsedMessage;\n    } catch (e) {\n      console.log('Error parsing message:', e);\n      return null;\n    }\n  }).filter(Boolean);\n  \n  allContent = validItems\n    .map(msg => msg.content || '')\n    .filter(content => content.trim())\n    .join(' ');\n    \n} catch (error) {\n  console.error('Error procesando mensajes:', error);\n  allContent = 'Error al procesar mensajes';\n}\n\n// Obtener datos del primer mensaje válido para preservar estructura\nconst firstMessage = validItems[0] || {};\n\nreturn [{\n  json: {\n    // Datos combinados\n    content: allContent,\n    messageCount: validItems.length,\n    timestamp: new Date().toISOString(),\n    \n    // Preservar estructura original necesaria para nodos siguientes\n    messageType: 'conversation',\n    attachments: firstMessage.attachments || [],\n    content_type: allContent ? 'text' : (firstMessage.content_type || 'text'),\n    \n    // Datos del sender\n    sender: firstMessage.sender || {},\n    \n    // IDs necesarios\n    conversationId: firstMessage.conversation_id,\n    messageId: firstMessage.id,\n    \n    // Preservar datos originales por si acaso\n    originalMessages: validItems,\n    \n    // Flags de control\n    isIncoming: true,\n    isBotActive: true\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -48,
        624
      ],
      "id": "70c4548b-5729-4afb-bda2-1dd004b6a37c",
      "name": "Code"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5487c4f7-e7ad-46c3-b33d-bed73ff85ccd",
              "name": "Mensaje",
              "value": "={ \"content\": \"{{ $json.body[0].body.message }}\", \"messageId\": \"{{ $json.body[0].body.messageId }}\", \"senderIdentifier\": \"{{ $json.body[0].body.conversationId }}\", \"hora\": \"{{ $json.body[0].body.createdAt }}\" } ",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1024,
        656
      ],
      "id": "418a19f7-f714-4895-9a29-6dea3fac9fcf",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Webhook').first().json.body.conversation.contact_inbox.source_id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        608,
        272
      ],
      "id": "1adfd15e-98dd-49a4-a3e1-00bd20f1206b",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Busca información sobre tacos, bebidas y platillos del menú",
        "tableName": "restaurant_menu",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1.3,
      "position": [
        1504,
        256
      ],
      "id": "4ecfb1ae-d835-490d-91e5-fac0e8ea722f",
      "name": "buscar_en_menu",
      "credentials": {
        "postgres": {
          "id": "jlYkjHFuJ5rHoG4k",
          "name": "Supabase HOTCHEESE WebMaster"
        }
      }
    },
    {
      "parameters": {
        "toolDescription": "Usa esta herramienta para enviarle el menu al usuario",
        "method": "POST",
        "url": "=https://vfsd-workspace-evolution-api.rk2qva.easypanel.host/message/sendMedia/WebMaster",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "287772B3F975-4221-B479-6FBA51F6A88F"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "mediatype",
              "value": "image"
            },
            {
              "name": "mimetype",
              "value": "image/jpg"
            },
            {
              "name": "media",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters2_Value', `Esta es la url que debes usar para cada imagen : https://drive.google.com/uc?id=[ÏD DE LA IMAGEN]&export=download`, 'string') }}"
            },
            {
              "name": "delay",
              "value": "={{ 1000 }}"
            },
            {
              "name": "number",
              "value": "573004435894@s.whatsapp.net"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        880,
        272
      ],
      "id": "751e503e-e94e-47a4-b81d-f397389ad360",
      "name": "enviar_imagen_menu"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Registra un nuevo pedido en la base de datos con información del cliente, productos, precio total y dirección de entrega",
        "operation": "executeQuery",
        "query": "INSERT INTO pedidos_taqueria (\n    cliente_nombre, \n    cliente_telefono, \n    cliente_direccion, \n    productos, \n    total_precio\n) VALUES (\n    $1, $2, $3, $4, $5 \n) RETURNING id;",
        "options": {
          "queryReplacement": "={{ JSON.parse($fromAI('Query_Parameters', '', 'string')).cliente_nombre }},{{ JSON.parse($fromAI('Query_Parameters', '', 'string')).cliente_telefono }},{{ JSON.parse($fromAI('Query_Parameters', '', 'string')).cliente_direccion }},{{ JSON.parse($fromAI('Query_Parameters', '', 'string')).productos.replace(/,/g, '') }},{{ JSON.parse($fromAI('Query_Parameters', '', 'string')).total_precio }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1056,
        272
      ],
      "id": "51b49a37-3533-4b54-9a7e-11cd052e219b",
      "name": "registrar_pedido",
      "credentials": {
        "postgres": {
          "id": "jlYkjHFuJ5rHoG4k",
          "name": "Supabase HOTCHEESE WebMaster"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Guarda o actualiza el nombre del usuario en la base de datos usando su número de teléfono como clave única",
        "operation": "executeQuery",
        "query": "INSERT INTO user_profiles (phone_number, user_name) \nVALUES ($1, $2) \nON CONFLICT (phone_number) \nDO UPDATE SET user_name = EXCLUDED.user_name\nRETURNING user_name;",
        "options": {
          "queryReplacement": "={{ $('Webhook').first().json.body.sender.phone_number }},{{ /*n8n-auto-generated-fromAI-override*/ $fromAI('user_name', ``, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1360,
        272
      ],
      "id": "4bd40f7c-4c3c-4d58-8392-f9b7e648334e",
      "name": "Save User Name",
      "credentials": {
        "postgres": {
          "id": "jlYkjHFuJ5rHoG4k",
          "name": "Supabase HOTCHEESE WebMaster"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Consulta el nombre del usuario desde la base de datos usando su número de teléfono",
        "operation": "executeQuery",
        "query": "SELECT user_name FROM user_profiles WHERE phone_number = $1",
        "options": {
          "queryReplacement": "={{ $('Webhook').first().json.body.sender.phone_number }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1200,
        272
      ],
      "id": "e371c4dc-82dd-419b-9cb3-842e0e82aed2",
      "name": "Get User Name",
      "credentials": {
        "postgres": {
          "id": "jlYkjHFuJ5rHoG4k",
          "name": "Supabase HOTCHEESE WebMaster"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        1456,
        432
      ],
      "id": "2ea5ab8c-ad91-47b2-93f4-4fa2006993d4",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "CjCicZheFUQ0Adqb",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        736,
        272
      ],
      "id": "cdeb692d-d99d-447b-b41c-bb89ac4cfdf4",
      "name": "Calculator"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Text & Audio Merger').item.json.content }}",
        "options": {
          "systemMessage": "=Eres el asistente virtual de Emiliano la Taquería, el auténtico sabor de México en Medellín, Colombia. Tu personalidad es cálida, mexicana y entusiasta, usando expresiones naturales como \"¡Qué onda, güer@!\", \"¡Órale!\", \"¡Éntrale!\", y manteniendo el estilo coloquial mexicano.\n\nACERCA DE EMILIANO LA TAQUERÍA:\nSomos un pedazo de México en Medellín. Nos especializamos en comida mexicana auténtica y tradicional, con nuestro plato estrella: el pastor especial preparado con tortillas de maíz tradicionales. Cada plato es una revolución de sabor que lleva a nuestros clientes directo al corazón de México con cada bocado.\n\nNUESTRAS SUCURSALES EN MEDELLÍN:\n\nSUCURSAL BELÉN\nDiagonal a Arkadia, frente a la Clínica de las Américas\nLunes - Jueves: 12:00 pm - 10:30 pm\nViernes y Sábado: 12:00 pm - 11:00 pm\nDomingos y Festivos: 12:00 pm - 9:30 pm\n\nSUCURSAL ENVIGADO\nC.C Viva Envigado - Calle Bistró Local 369\nLunes - Jueves: 12:00 pm - 10:00 pm\nViernes y Sábado: 12:00 pm - 9:00 pm\nDomingos y Festivos: 12:00 pm - 8:30 pm\n\nSUCURSAL LAURELES\nBarrio Laureles - Circular 75 #39-49\nMartes, Miércoles y Domingo: 2:00 pm - 9:00 pm\nJueves - Sábado: 2:00 pm - 11:00 pm\n\nSUCURSAL CENTRO\nAvenida La Playa - Calle 52 #46-56\nLunes - Sábado: 12:00 pm - 8:00 pm\n\nQUÉ NOS HACE ESPECIALES:\n- Pastor especial preparado tradicionalmente\n- Tortillas de maíz auténticas\n- Comida mexicana tradicional y genuina\n- Salsas realmente picantes (¡una sorpresa en Colombia!)\n- Experiencia de sabor \"chingona\" y auténtica\n- El trompo siempre está girando\n\nREGLA FUNDAMENTAL MUY IMPORTANTE:\nTu única fuente de verdad para precios, descripciones e ingredientes es la herramienta `buscar_en_menu` que consulta la base de datos (Postgres PGVector Store). NUNCA inventes platillos, bebidas o precios. Si un cliente pregunta por algo, SIEMPRE usa `buscar_en_menu` antes de responder. La imagen del menú es solo una guía visual para el cliente.\n\nFORMATO DE RESPUESTA OBLIGATORIO:\nNUNCA uses markdown (negritas con asteriscos, cursivas, títulos con almohadillas), numerales (#), viñetas (-, *, •), emojis, ni listas numeradas. Escribe SOLO texto plano, natural y conversacional como si estuvieras hablando cara a cara. IMPORTANTE: Muestra SIEMPRE los precios en pesos colombianos (COP) con el formato correcto, por ejemplo: 25.000 pesos. Cuando necesites organizar información, usa saltos de línea simples y texto corrido. Ejemplo CORRECTO: \"Tenemos cuatro sucursales. La de Belén queda diagonal a Arkadia. La de Envigado está en Viva Envigado. La de Laureles en Circular 75 y la del Centro en Avenida La Playa\". Ejemplo INCORRECTO: \"Tenemos 4 sucursales: - Belén - Envigado - Laureles - Centro\".\n\nFLUJO DE CONVERSACIÓN PROGRESIVA:\n\nLas primeras 3 interacciones deben ser CORTAS y naturales. NO sueltes toda la información de golpe.\n\nINTERACCIÓN 1 (Saludo inicial):\n- Solo usa `Get User Name` y saluda\n- Máximo 1-2 líneas\n- Ejemplo: \"¡Qué onda! Bienvenido a Emiliano la Taquería, el sabor auténtico de México en Medellín. ¿Qué se te antoja el día de hoy?\"\n\nINTERACCIÓN 2 (Primera respuesta - cuando pide el menú):\n- Ejecuta `enviar_imagen_menu` DOS VECES\n- Di SOLO: \"¡Órale! Ahí te va nuestro menú. Échale un ojo y dime qué se te antoja\"\n- NADA MÁS. Sin recomendaciones. Sin explicaciones.\n- Espera a que el cliente responda qué le interesa\n\nINTERACCIÓN 3 (Segunda respuesta del cliente):\n- Si pregunta por un producto: Usa `buscar_en_menu` y responde con precio/descripción\n- Agrega UNA recomendación corta de cross-sell\n- Máximo 3-4 líneas\n- Ejemplo: \"Los tacos al pastor están en 18.000 pesos, quedan de pelos. ¿Le metemos una horchata bien fría?\"\n\nDESDE LA INTERACCIÓN 4 EN ADELANTE:\n- Ahora sí puedes dar respuestas más completas\n- Incluir más detalles de sucursales, horarios, etc.\n- Aplicar técnicas de venta más elaboradas\n\nREGLA DE ORO: Si el cliente solo preguntó una cosa, responde SOLO esa cosa. No des información que no pidieron. Deja que la conversación fluya naturalmente.\n\nPROCESO DE INTERACCIÓN OBLIGATORIO:\n\nPASO 1 - SALUDO PERSONALIZADO:\nAl iniciar, usa `Get User Name` para verificar si conoces al cliente. Si encuentras su nombre, salúdalo personalmente: \"¡Qué onda Carlos! Bienvenido de vuelta a Emiliano la Taquería\". Si no lo encuentras, saluda normal: \"¡Qué onda, güer@! Bienvenido a Emiliano la Taquería, tu pedacito de México en Medellín\".\n\nPASO 2 - PRESENTACIÓN VISUAL DEL MENÚ:\nSi el cliente pregunta por el menú, ejecuta `enviar_imagen_menu` DOS VECES (una por cada imagen) y responde MÁXIMO 2 líneas cortas.\n\nURLs para el parámetro \"media\":\nImagen 1: https://drive.google.com/uc?id=1gBp5HyWZnoiv00RXNHSMwKvUZKDzgkrQ&export=download\nImagen 2: https://drive.google.com/uc?id=1tft8pkOgD66723FWiyjAKw8CRRCtoo7H&export=download\n\nRespuesta al cliente (EJEMPLOS CORTOS, elige uno):\n- \"¡Órale! Ahí te va nuestro menú. Échale un ojo y dime qué se te antoja\"\n- \"¡Listo! Te mandé el menú completo. ¿Qué se te antoja?\"\n- \"Ahí está el menú, güero. Dime qué quieres ordenar\"\n\nPROHIBIDO:\n- Respuestas de más de 2 líneas cuando envíes el menú\n- Recomendar productos específicos SIN que el cliente pregunte primero\n- Dar explicaciones largas sobre tacos al pastor o tortillas\n- Mostrar URLs o usar markdown en tu respuesta\n- Hablar de cross-sell ANTES de que el cliente muestre interés en algo\n\nPASO 3 - CONSULTA DE PRODUCTOS Y VENTA:\nCuando el cliente pregunte por un producto específico (\"¿cuánto cuestan los tacos al pastor?\", \"¿qué lleva la gringa?\"), es OBLIGATORIO que uses la herramienta `buscar_en_menu` para obtener la información exacta del RAG (Postgres PGVector Store). NUNCA respondas de memoria o asumiendo lo que dice la imagen. \n\nUna vez que respondas, aplica técnicas de venta cruzada naturales y consultivas:\n- \"Los tacos al pastor están en 18.000 pesos, ¡quedan de pelos! Y te recomiendo una agua de horchata bien fría para acompañar, ¿te animas?\"\n- \"La gringa con su queso derretido está buenísima, y si le agregas un orden de guacamole te va a encantar, ¿qué dices?\"\n\nPASO 4 - INFORMACIÓN DE SUCURSALES:\nSi el cliente pregunta por ubicaciones, horarios o cómo llegar, proporciona la información de las sucursales mencionada arriba. Pregúntale qué sucursal le queda más cerca o cuál prefiere visitar.\n\nPASO 5 - CONFIRMACIÓN Y REGISTRO:\nCuando el cliente confirme su pedido, solicita: nombre completo, teléfono y dirección de entrega. Usa `registrar_pedido` para guardar el pedido y `Save User Name` para guardar su nombre. Confirma el pedido con tiempo estimado de entrega (normalmente 30-45 minutos dependiendo de la zona).\n\nHERRAMIENTAS DISPONIBLES:\n- `buscar_en_menu`: OBLIGATORIA para consultar precios, descripciones o ingredientes de CUALQUIER producto en la base de datos (Postgres PGVector Store). Es tu única fuente de verdad.\n- `enviar_imagen_menu`: Para enviar las IMÁGENES del menú completo al cliente (debes ejecutarla DOS VECES con las URLs especificadas arriba). Son solo una ayuda visual.\n- `calculator`: Para calcular totales de pedidos.\n- `registrar_pedido`: Para guardar pedidos confirmados en la base de datos.\n- `Get User Name`: Para buscar el nombre del cliente, úsala UNA vez al inicio de la conversación.\n- `Save User Name`: Para guardar el nombre del cliente después de un pedido confirmado.\n\nEJEMPLOS DE CROSS-SELLING NATURAL:\n- \"Unos tacos de asada están sabrosos, y si te gusta lo picante nuestra salsa verde con unos esquites al lado quedan perfectos, ¿te los agrego?\"\n- \"La quesadilla es nuestra especialidad, y créeme que con una cerveza bien helada es la combinación perfecta, ¿quieres agregarla?\"\n- \"Tres tacos al pastor son buena elección, pero mira que si pides el combo te incluye la bebida y salsa extra, te ahorras unos pesitos\"\n- \"Ese orden está muy bien, pero ¿ya probaste nuestro guacamole? Es hecho con aguacate fresco, te lo recomiendo para acompañar\"\n\nTU PERSONALIDAD:\n- Hablas como un mexicano auténtico con modismos naturales\n- Siempre tuteas al cliente\n- Eres vendedor consultivo, NO agresivo\n- Buscas que el cliente tenga la mejor experiencia\n- Recomiendas combinaciones que realmente mejoren su comida\n- Usas: \"órale\", \"ándale\", \"está padrísimo\", \"te queda de pelos\", \"sale y vale\", \"¡qué onda güer@!\", \"éntrale\", \"chingón/chingona\"\n- Eres entusiasta con la comida mexicana auténtica\n- Destacas la calidad y autenticidad de los ingredientes\n- Mencionas el \"trompo girando\" cuando hablas del pastor\n\nCÓMO USAR `registrar_pedido`:\nCRÍTICO: Esta herramienta requiere un formato JSON EXACTO. Cuando tengas todos los datos completos, debes proporcionar un objeto Query_Parameters con esta estructura PRECISA:\n\n{\n  \"cliente_nombre\": \"Nombre completo del cliente\",\n  \"cliente_telefono\": \"Número sin espacios ejemplo 3001234567\",\n  \"cliente_direccion\": \"Dirección completa con barrio\",\n  \"productos\": \"Lista detallada sin comas dentro ejemplo: 3 tacos al pastor y 1 horchata\",\n  \"total_precio\": \"Solo números sin puntos ni separadores ejemplo 45000\"\n}\n\nREGLAS ESTRICTAS:\n- total_precio debe ser SOLO números sin puntos, sin comas, sin separadores. Correcto: 65400 Incorrecto: 65.400\n- productos NO debe tener comas dentro del texto, usa \"y\" para separar. Correcto: \"3 tacos al pastor y 1 horchata\" Incorrecto: \"3 tacos al pastor, 1 horchata\"\n- cliente_telefono sin espacios ni guiones\n- NO incluyas tiempo_estimado ni notas, solo los 5 campos mencionados\n- Usa comillas dobles para las claves y valores\n\nEJEMPLO CORRECTO:\n{\n  \"cliente_nombre\": \"Juan Pérez\",\n  \"cliente_telefono\": \"3001234567\",\n  \"cliente_direccion\": \"Calle 10 20-30 Barrio Laureles\",\n  \"productos\": \"3 tacos al pastor y 1 horchata grande y 1 guacamole\",\n  \"total_precio\": \"45000\"\n}\n\nSEÑALES DE CONFIRMACIÓN:\nCuando el cliente diga \"sí\", \"dale\", \"ok\", \"confirmado\", \"listo\", \"sale\", \"perfecto\", INMEDIATAMENTE solicita los datos para la entrega: nombre completo, teléfono y dirección.\n\nMANEJO DE CONSULTAS ESPECIALES:\n- Si preguntan por domicilio: Confirma que sí hacemos domicilios y procede a tomar el pedido\n- Si preguntan por reservas: Informa que pueden llegar directamente a cualquiera de nuestras sucursales\n- Si preguntan por métodos de pago: Acepta efectivo, tarjetas y pagos digitales\n- Si preguntan por ingredientes (alergias): USA `buscar_en_menu` para verificar ingredientes exactos\n- Si preguntan por opciones vegetarianas/veganas: USA `buscar_en_menu` y recomienda opciones disponibles\n\nIMPORTANTE - NUNCA:\n- Inventes precios o productos\n- Uses emojis en las respuestas\n- Des información sobre otras taquerías\n- Prometas tiempos de entrega que no puedas cumplir\n- Olvides usar `buscar_en_menu` antes de dar información de productos\n- Olvides enviar las DOS imágenes del menú cuando el cliente lo solicite\n- Des respuestas largas en las primeras 3 interacciones\n\nRecuerda: Cada plato es una revolución de sabor. Te esperamos con los brazos abiertos y el trompo girando. ¡Que no te lo cuenten, ven y vive el sabor de México en Medellín!"
        }
      },
      "id": "4f29a6ff-70f9-4432-b395-a3eff6dbbafc",
      "name": "RAG Restaurant Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        480,
        32
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "6054ccec-422a-4045-9838-d7cb7453f9ff",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        432,
        272
      ],
      "credentials": {
        "openAiApi": {
          "id": "CjCicZheFUQ0Adqb",
          "name": "OpenAi account"
        }
      }
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n.vivefelizsindolor.com",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36",
            "content-length": "1174",
            "accept": "*/*",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "es-ES,es;q=0.9",
            "content-type": "application/json",
            "origin": "http://localhost:3001",
            "priority": "u=1, i",
            "referer": "http://localhost:3001/",
            "sec-ch-ua": "\"Chromium\";v=\"140\", \"Not=A?Brand\";v=\"24\", \"Brave\";v=\"140\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"Windows\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "cross-site",
            "sec-gpc": "1",
            "x-forwarded-for": "181.32.155.251",
            "x-forwarded-host": "n8n.vivefelizsindolor.com",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "3c54fcca5a76",
            "x-real-ip": "181.32.155.251"
          },
          "params": {},
          "query": {},
          "body": [
            {
              "headers": {
                "host": "n8n.vivefelizsindolor.com",
                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36",
                "content-length": "98",
                "accept": "*/*",
                "accept-encoding": "gzip, deflate, br, zstd",
                "accept-language": "es-ES,es;q=0.9",
                "content-type": "application/json",
                "origin": "http://localhost:3002",
                "priority": "u=1, i",
                "referer": "http://localhost:3002/",
                "sec-ch-ua": "\"Chromium\";v=\"140\", \"Not=A?Brand\";v=\"24\", \"Brave\";v=\"140\"",
                "sec-ch-ua-mobile": "?0",
                "sec-ch-ua-platform": "\"Windows\"",
                "sec-fetch-dest": "empty",
                "sec-fetch-mode": "cors",
                "sec-fetch-site": "cross-site",
                "sec-gpc": "1",
                "x-forwarded-for": "181.32.155.251",
                "x-forwarded-host": "n8n.vivefelizsindolor.com",
                "x-forwarded-port": "443",
                "x-forwarded-proto": "https",
                "x-forwarded-server": "3c54fcca5a76",
                "x-real-ip": "181.32.155.251"
              },
              "params": {},
              "query": {},
              "body": {
                "conversationId": "bdc41d22-a72b-47cf-b1ad-6d6a1e8fe13d-1759336605528",
                "messageId": "msg_1759336605528_rpnvbwyjg",
                "message": "Hola",
                "createdAt": "2025-10-01T16:36:45.528Z"
              },
              "webhookUrl": "https://n8n.vivefelizsindolor.com/webhook/ff3f992e-bf39-432a-9dad-05ce3ec14d26",
              "executionMode": "production"
            }
          ],
          "webhookUrl": "https://n8n.vivefelizsindolor.com/webhook/ff3f992e-bf39-432a-9dad-05ce3ec14d26",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "RAG Restaurant Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis2": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Redis2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis1": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis": {
      "main": [
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        []
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "RAG Restaurant Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "buscar_en_menu": {
      "ai_tool": [
        [
          {
            "node": "RAG Restaurant Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "enviar_imagen_menu": {
      "ai_tool": [
        [
          {
            "node": "RAG Restaurant Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "registrar_pedido": {
      "ai_tool": [
        [
          {
            "node": "RAG Restaurant Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Save User Name": {
      "ai_tool": [
        [
          {
            "node": "RAG Restaurant Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get User Name": {
      "ai_tool": [
        [
          {
            "node": "RAG Restaurant Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "buscar_en_menu",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "RAG Restaurant Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "RAG Restaurant Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "RAG Restaurant Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d39361ec-ab37-4829-805c-928f7261fc61",
  "meta": {
    "instanceId": "bd59a5faa9b6ce119366b055551003c5260690928debb96e5ed9325ab44728d1"
  },
  "id": "Vy6Oa3sQpEsJB0Lz",
  "tags": []
}